[{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://cantinilab.github.io/HuMMuS/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":[]},{"path":[]},{"path":[]},{"path":"https://cantinilab.github.io/HuMMuS/articles/add_networks.html","id":"add-a-new-bipartite","dir":"Articles","previous_headings":"General plan","what":"3. Add a new bipartite","title":"Add external networks to HuMMuS object","text":"","code":"# install python dependency # reticulate::py_install(\"hummuspy\", envname = \"r-reticulate\", pip=TRUE) reticulate::use_condaenv(\"r-reticulate\") hummuspy <- reticulate::import(\"hummuspy\") library(HuMMuS)"},{"path":"https://cantinilab.github.io/HuMMuS/articles/add_networks.html","id":"initialisation-of-hummus-object","dir":"Articles","previous_headings":"","what":"1. Initialisation of HuMMuS object","title":"Add external networks to HuMMuS object","text":"HuMMuS R objects instances developed top seurat objects. means ’s created seurat object contained assays can accessed way. Additionally, contains motifs_db object, providing tf motifs informations, multilayer objects, completed going tutorial. mostly include : - list multiplex networks (one per modality) - list bipartites (one per connection layers)","code":"# Create an hummus object from seurat object # Load the Chen dataset, which is a Seurat object containing scRNA-seq and scATAC-seq data data(\"chen_dataset_subset\") chen_dataset_subset ## An object of class Seurat  ## 12000 features across 385 samples within 2 assays  ## Active assay: RNA (2000 features, 0 variable features) ##  2 layers present: counts, data ##  1 other assay present: peaks hummus <- Initiate_Hummus_Object(chen_dataset_subset)   # wrapper of Signac::GetGRangesFromEnsDb, adapting output to UCSC format genome_annotations <- get_genome_annotations(   ensdb_annotations = EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86) # Add annotations to peak assay Signac::Annotation(hummus@assays$peaks) <- genome_annotations rm(genome_annotations)  # Load TF motifs from JASPAR2020 and chromVARmotifs in hummus object hummus@motifs_db <- get_tf2motifs() # by default human motifs"},{"path":[]},{"path":"https://cantinilab.github.io/HuMMuS/articles/add_networks.html","id":"add-a-new-multiplex-through-a-network","dir":"Articles","previous_headings":"2. Add networks","what":"2.1 Add a new multiplex through a network","title":"Add external networks to HuMMuS object","text":"","code":"# The networks should be imported as 3 columns data.frame: (source, target, weight) rna_network_path = \"chen_multilayer/multiplex/RNA/RNA_GENIE3.tsv\" rna_network <- read.table(rna_network_path, sep = \"\\t\", header = FALSE) head(rna_network) ##       V1      V2        V3 ## 1  BACH1  COL4A6 0.7388727 ## 2  DDIT3 CCDC173 0.7060954 ## 3  DDIT3  CCT6P1 0.6697768 ## 4  ATF6B  DNASE1 0.6598122 ## 5 ARID3B   ACER3 0.6499825 ## 6   ATF4  ATP8A1 0.6465523 hummus <- add_network(     hummus, rna_network,     multiplex_name = \"RNA\",     network_name = \"GENIE3\",     weighted = TRUE,     verbose = 1) ##  Creating new multiplex :  RNA"},{"path":"https://cantinilab.github.io/HuMMuS/articles/add_networks.html","id":"add-a-network-to-an-existing-multiplex","dir":"Articles","previous_headings":"2. Add networks","what":"2.2 Add a network to an existing multiplex","title":"Add external networks to HuMMuS object","text":"","code":"hummus <- add_network(     hummus, rna_network,     multiplex_name = \"RNA\",     network_name = \"GENIE3_other\",     weighted = TRUE)"},{"path":"https://cantinilab.github.io/HuMMuS/articles/add_networks.html","id":"add-external-bipartites","dir":"Articles","previous_headings":"2. Add networks","what":"3 Add external bipartites","title":"Add external networks to HuMMuS object","text":"Bipartites can 2 3 columns data.frame, depending weighted . Bipartites computed HuMMuS added directly object : Display HuMMuS object","code":"## Add TF peaks bipartite atac_rna_path = \"chen_multilayer/bipartite/atac_rna.tsv\" atac_rna <- read.table(atac_rna_path, sep = \"\\t\", header = FALSE) head(atac_rna) ##       V1                        V2 ## 1   CMC1    chr3-28241304-28242015 ## 2 ANGEL2  chr1-213015141-213016006 ## 3  CNNM2 chr10-103053902-103054565 ## 4  DNM1L   chr12-32678989-32680007 ## 5   DHX9  chr1-182838974-182840143 ## 6 B3GAT2    chr6-70955759-70956501 hummus@multilayer@bipartites[[\"atac_rna\"]] <- new(\"bipartite\",                            \"network\" = atac_rna,                            \"multiplex_left\" = \"RNA\",                            \"multiplex_right\" = \"peaks\") hummus ## Hummus object containing a multilayer object : ## Multilayer network containing  1  bipartite networks and  1  multiplex networks. ##   ## - Multiplex names:  RNA  ## - Bipartite names:  atac_rna  ##  ##  ## And a Seurat object : ##  ## 12000 features across samples within 2 assays  ## Active assay: RNA ( features, 0 variable features) ##  1 other assay present: peaks hummus@multilayer@multiplex ## $RNA ## Multiplex of  2  networks with 2000 features. ##  Networks names:  GENIE3, GENIE3_other"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"useful-links","dir":"Articles","previous_headings":"","what":"Useful links:","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"Paper: https://www.biorxiv.org/content/10.1101/2023.06.09.543828v1 Github repo: https://github.com/cantinilab/HuMMuS Documentation: https://cantinilab.github.io/HuMMuS/","code":""},{"path":[]},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"useful-ressources","dir":"Articles","previous_headings":"General description of the pipeline","what":"Useful ressources","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"Preprint detailing method: https://www.biorxiv.org/content/10.1101/2023.06.09.543828v1 Github repo detailing installation: https://github.com/cantinilab/HuMMuS Documentation vignette: https://cantinilab.github.io/HuMMuS","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"setting-up-the-environment","dir":"Articles","previous_headings":"General description of the pipeline","what":"0. Setting up the environment","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"","code":"# install python dependency envname = \"r-reticulate\" # reticulate::py_install(\"hummuspy\", envname = envname, pip=TRUE) reticulate::use_condaenv(envname)  hummuspy <- reticulate::import(\"hummuspy\") library(HuMMuS)"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"download-the-single-cell-data","dir":"Articles","previous_headings":"General description of the pipeline","what":"Download the single-cell data","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"data used tutorial can downloaded ","code":""},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"initialisation-of-hummus-object","dir":"Articles","previous_headings":"General description of the pipeline","what":"1. Initialisation of HuMMuS object","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"HuMMuS R objects instances developed top seurat objects. means ’s created seurat object contained assays can accessed way. Additionally, contains motifs_db object, providing tf motifs informations, multilayer objects, completed going tutorial. mostly include : list multiplex networks (one per modality) list bipartites (one per connection layers)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"transform-data-into-a-hummus-object","dir":"Articles","previous_headings":"General description of the pipeline > 1. Initialisation of HuMMuS object","what":"1.1. Transform data into a hummus object","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"","code":"# Load the Chen dataset, which is a Seurat object containing scRNA-seq and scATAC-seq data data(\"chen_dataset_subset\") chen_dataset_subset ## An object of class Seurat  ## 12000 features across 385 samples within 2 assays  ## Active assay: RNA (2000 features, 0 variable features) ##  2 layers present: counts, data ##  1 other assay present: peaks # Create an hummus object from seurat object hummus <- Initiate_Hummus_Object(chen_dataset_subset)"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"add-genome-and-motif-annotations-to-hummus-object","dir":"Articles","previous_headings":"General description of the pipeline > 1. Initialisation of HuMMuS object","what":"1.2. Add genome and motif annotations to hummus object","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"Fetch genome annotations online (necessitate internet connection). can also request “EnsDB” object adapted data (e.g. EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86 human genome annotations) use genome annotations format. Add genome annotations hummus/seurat object Get TF motifs JASPAR2020 chromVARmotifs databsases motifs_db object. default, human motifs used. can specify species want use species argument (e.g. species = “mouse” mouse). motifs_db objects contain 3 slots : * motifs = \"PWMatrixList\" * tf2motifs = \"data.frame\" * tfs = \"NULL\" PWMatrixList named vector motif matrices, whil tf2motifs correspondance table TFs motifs. tfs named vector TFs. can also use motifs_db object, long contains slots.","code":"# get human genome annotation from EndDb data # wrapper of Signac::GetGRangesFromEnsDb, adapting output to UCSC format genome_annotations <- get_genome_annotations(   ensdb_annotations = EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86)  # can also be downloaded, saved as an RDS objects for example Signac::Annotation(hummus@assays$peaks) <- genome_annotations rm(genome_annotations) # Load TF motifs from JASPAR2020 and chromVARmotifs in hummus object hummus@motifs_db <- get_tf2motifs() # by default human motifs"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"construction-of-the-multilayer-1","dir":"Articles","previous_headings":"General description of the pipeline","what":"2. Construction of the multilayer","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"can compute different layers bipartites indicated . example multilayer completed can also imported : data(chen_subset_hummus). object corresponds multilayer chen_dataset_subset completed. can go part 3, replacing hummus chen_subset_hummus step. Finally, can compute different layers , add afterwards. allows use faster methods compute networks (e.g. Arboreto gene network, ATACNet peak network, etc.).","code":""},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"compute-3-layers-and-2-bipartites","dir":"Articles","previous_headings":"General description of the pipeline > 2. Construction of the multilayer","what":"Compute 3 layers and 2 bipartites","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"!! Long step !! can also go directly part 3 “discovery tour”. :)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"tf---peaks-bipartite-reconstruction","dir":"Articles","previous_headings":"General description of the pipeline > 2. Construction of the multilayer","what":"2.1. TF - peaks bipartite reconstruction","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"TF - peaks bipartite computed using motifs_db object peak assay. can specify assay use filter TFs (e.g. “RNA” want use TFs expressed dataset). NULL, TFs motifs used. BSGenome object used identify location motifs intersect peak can also specify name bipartite added hummus object. default, named “tf_peak”.","code":"hummus <- bipartite_tfs2peaks(               hummus_object = hummus,               tf_expr_assay = \"RNA\", # use to filter TF on only expressed TFs,                                      # if NULL, all TFs with motifs are used               peak_assay = \"peaks\",               tf_multiplex_name = \"TF\",               genome = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38,               ) ## Computing TF-peak bipartite ##   31 TFs expressed ## Building motif matrix ## Finding motif positions ## Creating Motif object ## Warning in CreateMotifObject(data = motif.matrix, positions = motif.positions, ## : Non-unique motif names supplied, making unique ##  Adding TF info ##  Returning TF-peak links as bipartite object ## no peak layer name provided, using peak_assay name"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"genes---peaks-bipartite-reconstruction","dir":"Articles","previous_headings":"General description of the pipeline > 2. Construction of the multilayer","what":"2.2. Genes - peaks bipartite reconstruction","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"Peaks - genes bipartite computed","code":"hummus <- bipartite_peaks2genes(                       hummus_object = hummus,                       gene_assay = \"RNA\",                       peak_assay = \"peaks\",                       store_network = FALSE,                       )"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"compute-layer-networks-and-add-it-to-hummus-object","dir":"Articles","previous_headings":"General description of the pipeline > 2. Construction of the multilayer > 2.2. Genes - peaks bipartite reconstruction","what":"Compute layer networks and add it to hummus object","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"one three layers computed individually.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"compute-the-tf-network-from-omnipath-database","dir":"Articles","previous_headings":"General description of the pipeline > 2. Construction of the multilayer","what":"2.3. Compute the TF network from OmniPath database","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"currently use OmniPath R package fetch TF interactions. can first specify want use TFs expressed dataset (RNA assay hummus object). gene_assay NULL, TFs motifs used.  can specify interactions want keep ‘source_target’ argument (“” | “”). “”, interactions 2 TFs present dataset kept. “”, interactions involving least one TF present dataset kept. Finally, can specify name multiplex name network added hummus object. added network undirected unweighted since PPI OmniPath database directional return weight .","code":"hummus <- compute_tf_network(hummus,                             gene_assay = \"RNA\", # default = None ;                                                 # If a assay is provided,                                                 # only the TFs that are present                                                 # will be considered                             verbose = 1,                             #source_target = \"OR\",                             multiplex_name = \"TF\",                             tf_network_name = \"TF_network\") ## Creating a fake TF network with all TFs connected to a fake node. ##   31 TFs expressed ## TF network construction time: 0.007212639    Creating new multiplex :  TF"},{"path":[]},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"this-step-can-be-very-slow-if-you-have-thousands-of-cells","dir":"Articles","previous_headings":"General description of the pipeline > 2. Construction of the multilayer","what":"!! This step can be very slow if you have thousands of cells !!","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"Current recommendation big dataset compute network GRNBoost2 thorugh arboreto add hummus object afterwards. Different methods can used compute gene network. now, GENIE3 implemented HuMMuS. can specify assay use compute network (gene_assay). can specify number cores use compute network. can also specify want save network locally (store_network = TRUE) (store_network = FALSE). choose save network, need specify output file name (output_file). returned network considered undirected weighted. GENIE3 returns directed network, symmetrize random walk restart exploration genes proximity.","code":"hummus <- compute_gene_network(               hummus,               gene_assay = \"RNA\",               method = \"GENIE3\",               verbose = 1,               number_cores = 5, # GENIE3 method can be ran                                 # parallelised on multiple cores               store_network = FALSE, # by default : FALSE, but                                      # each network can be saved                                       # when computed with hummus               output_file = \"gene_network.tsv\") ## Computing gene network with  GENIE3  ... ##  No TFs list provided, fetching from hummus object... ##   31 TFs expressed ##  Gene network construction time: 7.278556  ##  Creating new multiplex :  RNA"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"compute-the-peak-network-from-scatac-seq-w-cicero","dir":"Articles","previous_headings":"General description of the pipeline > 2. Construction of the multilayer","what":"2.5. Compute the peak network from scATAC-seq w/ Cicero","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"Different methods can used compute peak network. now, Cicero implemented HuMMuS. can specify assay use compute network (peak_assay). can also specify number cores use compute network. can also specify want save network locally (store_network = TRUE) (store_network = FALSE). choose save network, need specify output file name (output_file). returned network considered undirected weighted, since cis-regulatory interaction Cicero outputs directional.","code":"hummus <- compute_atac_peak_network(hummus,               atac_assay = \"peaks\",               verbose = 1,               genome = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38,               store_network = FALSE) ## Overlap QC metrics: ## Cells per bin: 50 ## Maximum shared cells bin-bin: 44 ## Mean shared cells bin-bin: 6.42882882882883 ## Median shared cells bin-bin: 0 ## Warning in cicero::make_cicero_cds(input_cds, reduced_coordinates = ## umap_coords, : On average, more than 10% of cells are shared between paired ## bins. ## [1] \"Starting Cicero\" ## [1] \"Calculating distance_parameter value\" ## Warning in estimate_distance_parameter(cds, window = window, maxit = 100, : ## Could not calculate sample_num distance_parameters (74 were calculated) - see ## documentation details ## [1] \"Running models\" ## [1] \"Assembling connections\" ## [1] \"Successful cicero models:  4782\" ## [1] \"Other models: \" ##  ## Zero or one element in range  ##                         8803  ## [1] \"Models with errors:  0\" ## [1] \"Done\" ##  ##  4699 peak edges with a coaccess score > 0 were found. ## Peak network construction time: 23.40882 Creating new multiplex :  peaks"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"analyse-of-the-multilayer-and-definition-of-grn","dir":"Articles","previous_headings":"General description of the pipeline","what":"3. Analyse of the multilayer and definition of GRN","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"","code":"data(chen_subset_hummus)  hummus <- chen_subset_hummus"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"save-the-mulilayer-in-a-classic-hierarchical-structure","dir":"Articles","previous_headings":"General description of the pipeline > 3. Analyse of the multilayer and definition of GRN","what":"3.1. Save the mulilayer in a classic hierarchical structure","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"package used random walk restart exploration (multixrank) requires currently save network files disk. simplify organisation file, possible save everything necessary function save_multilayer(). create folder (specified folder_name) containing files necessary run multixrank algorithm. folder contain following subfolders : * bipartite : containing bipartites files * multiplex : containing multiplex sub-subfolders * multiplex_1 (e.g. TF|peak|RNA) : containing network file layer multiplex * seed : contain seed files (necessary compute HuMMuS outputs later) * config : contain config files (necessary compute HuMMuS outputs later)","code":"save_multilayer(hummus = hummus,                 folder_name = \"chen_multilayer\") ## Warning in dir.create(folder_name): 'chen_multilayer' already exists ## Warning in dir.create(paste0(folder_name, \"/\", multiplex_folder)): ## 'chen_multilayer/multiplex' already exists ## Warning in dir.create(paste0(folder_name, \"/\", bipartite_folder)): ## 'chen_multilayer/bipartite' already exists ## Multiplex of  1  networks with 32 features. ##  Networks names:  TF_network[1] \"TF TF_network\" ## Warning in dir.create(paste0(folder_name, \"/\", multiplex_folder, \"/\", ## multiplex_name)): 'chen_multilayer/multiplex/RNA' already exists ## Multiplex of  1  networks with 2000 features. ##  Networks names:  RNA_GENIE3[1] \"RNA RNA_GENIE3\" ## Multiplex of  1  networks with 4639 features. ##  Networks names:  peak_network_cicero[1] \"peaks peak_network_cicero\""},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"retrieve-target-genes","dir":"Articles","previous_headings":"General description of the pipeline > 3. Analyse of the multilayer and definition of GRN","what":"3.2. Retrieve target genes","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"HuMMuS, inference GRN target gene TFs different outputs. Indeed, GRN computed making TFs compete regulate genes (random walk restart starting genes going TFs), target genes computed making genes compete regulated TFs (random walk restart starting TFs going genes). target genes output, can specify list TFs (tf_list) use seed (NULL default, TFs used seed). links seed TFs genes computed. can also specify list genes use. score genes present network gene_list returned.","code":"ATF2_genes <- define_target_genes(   hummus,   tf_list = list(\"ATF2\"),   multilayer_f = \"chen_multilayer\",   njobs = 1   ) ## multiplexes_list :  {'TF': {'TF_network': '00'}, 'RNA': {'RNA_GENIE3': '01'}, 'peaks': {'peak_network_cicero': '01'}} ## bipartites_list :  {'tf_peak.tsv': {'multiplex_right': 'TF', 'multiplex_left': 'peaks'}, 'atac_rna.tsv': {'multiplex_right': 'peaks', 'multiplex_left': 'RNA'}} ## folder_multiplexes :  multiplex ## folder_bipartites :  bipartite ## gene_list :  None ## tf_list :  ['ATF2'] ## peak_list :  None ## config_filename :  target_genes_config.yml ## config_folder :  config ## tf_multiplex :  TF ## peak_multiplex :  peaks ## rna_multiplex :  RNA ## update_config :  True ## save :  False ## return_df :  True ## output_f :  None ## njobs :  1 ## {'TF': {'TF_network': '00'}, 'RNA': {'RNA_GENIE3': '01'}, 'peaks': {'peak_network_cicero': '01'}} ## bipartites_type has been provided throguh a list, make sure the order matches the one of the 'bipartites' dictionary' keys. ## RNA_1 ## Opening network from chen_multilayer/multiplex/RNA/RNA_GENIE3.tsv. ## TF_1 ## Opening network from chen_multilayer/multiplex/TF/TF_network.tsv. ## peaks_1 ## Opening network from chen_multilayer/multiplex/peaks/peak_network_cicero.tsv. ## Opening network from chen_multilayer/bipartite/tf_peak.tsv. ## Opening network from chen_multilayer/bipartite/atac_rna.tsv. ## http://127.0.0.1:8787/status ## Processing seeds... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00 head(ATF2_genes) ##   index layer path_layer        score   tf     gene ## 1  1175   RNA      RNA_1 5.291440e-05 ATF2    CDC5L ## 2   540   RNA      RNA_1 4.570328e-05 ATF2     ATF3 ## 3   591   RNA      RNA_1 4.486208e-05 ATF2    ATP5I ## 4  1096   RNA      RNA_1 4.485191e-05 ATF2 CCNB1IP1 ## 5  1872   RNA      RNA_1 4.482241e-05 ATF2   DGCR14 ## 6   536   RNA      RNA_1 4.176609e-05 ATF2    ATAT1 target_genes <- define_target_genes(   hummus,   multilayer_f = \"chen_multilayer\",   njobs = 1   ) ## multiplexes_list :  {'TF': {'TF_network': '00'}, 'RNA': {'RNA_GENIE3': '01'}, 'peaks': {'peak_network_cicero': '01'}} ## bipartites_list :  {'tf_peak.tsv': {'multiplex_right': 'TF', 'multiplex_left': 'peaks'}, 'atac_rna.tsv': {'multiplex_right': 'peaks', 'multiplex_left': 'RNA'}} ## folder_multiplexes :  multiplex ## folder_bipartites :  bipartite ## gene_list :  None ## tf_list :  None ## peak_list :  None ## config_filename :  target_genes_config.yml ## config_folder :  config ## tf_multiplex :  TF ## peak_multiplex :  peaks ## rna_multiplex :  RNA ## update_config :  True ## save :  False ## return_df :  True ## output_f :  None ## njobs :  1 ## {'TF': {'TF_network': '00'}, 'RNA': {'RNA_GENIE3': '01'}, 'peaks': {'peak_network_cicero': '01'}} ## bipartites_type has been provided throguh a list, make sure the order matches the one of the 'bipartites' dictionary' keys. ## RNA_1 ## Opening network from chen_multilayer/multiplex/RNA/RNA_GENIE3.tsv. ## TF_1 ## Opening network from chen_multilayer/multiplex/TF/TF_network.tsv. ## peaks_1 ## Opening network from chen_multilayer/multiplex/peaks/peak_network_cicero.tsv. ## Opening network from chen_multilayer/bipartite/tf_peak.tsv. ## Opening network from chen_multilayer/bipartite/atac_rna.tsv. ## http://127.0.0.1:8787/status ## Processing seeds... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:02 head(target_genes) ##   index layer path_layer        score   tf     gene ## 1  1340   RNA      RNA_1 0.0002318541 CUX1   CHRNB1 ## 2  1175   RNA      RNA_1 0.0002299783 CUX1    CDC5L ## 3   262   RNA      RNA_1 0.0002217501 CUX1    ALG11 ## 4  1182   RNA      RNA_1 0.0002211187 CUX1    CDCA5 ## 5   196   RNA      RNA_1 0.0002201921 CUX1    AGBL5 ## 6  1172   RNA      RNA_1 0.0001498125 BPTF CDC42SE1"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"define-grn","dir":"Articles","previous_headings":"General description of the pipeline > 3. Analyse of the multilayer and definition of GRN","what":"3.3. Define GRN","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"GRN defined using multixrank algorithm. requires hummuspy python package installed (pip install hummuspy). can parallelised using njobs argument. can also specify list genes list TFs use.","code":"grn <- define_grn(   hummus,   multilayer_f = \"chen_multilayer\",   njobs = 5   ) grn"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"retrieve-enhancers","dir":"Articles","previous_headings":"General description of the pipeline > 3. Analyse of the multilayer and definition of GRN","what":"3.4. Retrieve enhancers","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"can also specify list peaks use.","code":"enhancers <- define_enhancers(   hummus,   gene_list = list(\"ATF2\"),   multilayer_f = \"chen_multilayer\",   njobs = 1   ) ## multiplexes_list :  {'TF': {'TF_network': '00'}, 'RNA': {'RNA_GENIE3': '01'}, 'peaks': {'peak_network_cicero': '01'}} ## bipartites_list :  {'tf_peak.tsv': {'multiplex_right': 'TF', 'multiplex_left': 'peaks'}, 'atac_rna.tsv': {'multiplex_right': 'peaks', 'multiplex_left': 'RNA'}} ## folder_multiplexes :  multiplex ## folder_bipartites :  bipartite ## gene_list :  ['ATF2'] ## tf_list :  None ## peak_list :  None ## config_filename :  enhancers_config.yml ## config_folder :  config ## tf_multiplex :  TF ## peak_multiplex :  peaks ## rna_multiplex :  RNA ## update_config :  True ## save :  False ## return_df :  True ## output_f :  None ## njobs :  1 ## {'TF': {'TF_network': '00'}, 'RNA': {'RNA_GENIE3': '01'}, 'peaks': {'peak_network_cicero': '01'}} ## bipartites_type has been provided throguh a list, make sure the order matches the one of the 'bipartites' dictionary' keys. ## RNA_1 ## Opening network from chen_multilayer/multiplex/RNA/RNA_GENIE3.tsv. ## TF_1 ## Opening network from chen_multilayer/multiplex/TF/TF_network.tsv. ## peaks_1 ## Opening network from chen_multilayer/multiplex/peaks/peak_network_cicero.tsv. ## Opening network from chen_multilayer/bipartite/tf_peak.tsv. ## Opening network from chen_multilayer/bipartite/atac_rna.tsv. ## http://127.0.0.1:8787/status ## Processing seeds... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00 head(enhancers) ##   index layer path_layer        score gene                     peak ## 1  3950 peaks    peaks_1 0.0008951819 ATF2   chr6-44387360-44388305 ## 2  3134 peaks    peaks_1 0.0007383304 ATF2 chr3-107522766-107524070 ## 3  4007 peaks    peaks_1 0.0006763254 ATF2 chr7-102125135-102125606 ## 4  4189 peaks    peaks_1 0.0004115710 ATF2   chr7-73738654-73739271 ## 5   676 peaks    peaks_1 0.0003972408 ATF2  chr10-73874242-73875104 ## 6  1699 peaks    peaks_1 0.0003850920 ATF2  chr16-67561885-67563510"},{"path":"https://cantinilab.github.io/HuMMuS/articles/chen_vignette.html","id":"retrieve-binding-regions","dir":"Articles","previous_headings":"General description of the pipeline > 3. Analyse of the multilayer and definition of GRN","what":"3.5. Retrieve binding regions","title":"Predict GRN from scRNA+scATAC data (Chen 2018 dataset)","text":"binding regions output, can specify list TFs (tf_list) use seed (NULL default, TFs used seed). links seed TFs peaks computed. can also specify list peaks use. score peaks present network peak_list returned.","code":"binding_regions <- define_binding_regions(   hummus,   multilayer_f = \"chen_multilayer\",   njobs = 1   ) ## multiplexes_list :  {'TF': {'TF_network': '00'}, 'RNA': {'RNA_GENIE3': '01'}, 'peaks': {'peak_network_cicero': '01'}} ## bipartites_list :  {'tf_peak.tsv': {'multiplex_right': 'TF', 'multiplex_left': 'peaks'}, 'atac_rna.tsv': {'multiplex_right': 'peaks', 'multiplex_left': 'RNA'}} ## folder_multiplexes :  multiplex ## folder_bipartites :  bipartite ## gene_list :  None ## tf_list :  None ## peak_list :  None ## config_filename :  binding_regions_config.yml ## config_folder :  config ## tf_multiplex :  TF ## peak_multiplex :  peaks ## rna_multiplex :  RNA ## update_config :  True ## save :  False ## return_df :  True ## output_f :  None ## njobs :  1 ## {'TF': {'TF_network': '00'}, 'RNA': {'RNA_GENIE3': '01'}, 'peaks': {'peak_network_cicero': '01'}} ## bipartites_type has been provided throguh a list, make sure the order matches the one of the 'bipartites' dictionary' keys. ## RNA_1 ## Opening network from chen_multilayer/multiplex/RNA/RNA_GENIE3.tsv. ## TF_1 ## Opening network from chen_multilayer/multiplex/TF/TF_network.tsv. ## peaks_1 ## Opening network from chen_multilayer/multiplex/peaks/peak_network_cicero.tsv. ## Opening network from chen_multilayer/bipartite/tf_peak.tsv. ## Opening network from chen_multilayer/bipartite/atac_rna.tsv. ## http://127.0.0.1:8787/status ## Processing seeds... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:02 head(binding_regions) ##   index layer path_layer       score   tf                     peak ## 1   464 peaks    peaks_1 0.001680402 CUX1   chr1-65002512-65003322 ## 2  4617 peaks    peaks_1 0.001675393 CUX1   chrX-48971714-48972653 ## 3   468 peaks    peaks_1 0.001674121 CUX1   chr1-65419692-65420979 ## 4  4615 peaks    peaks_1 0.001559648 CUX1   chrX-48918888-48919598 ## 5  4307 peaks    peaks_1 0.001502478 CUX1   chr8-24955892-24956818 ## 6  2655 peaks    peaks_1 0.001502093 CUX1 chr2-201642365-201643651"},{"path":"https://cantinilab.github.io/HuMMuS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rémi Trimbour. Author, maintainer.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Trimbour R (2025). HuMMuS: Heterogeneous Multilayer Network Multi-Omics Single-Cell Data. R package version 0.0.2, https://cantinilab.github.io/HuMMuS/.","code":"@Manual{,   title = {HuMMuS: Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data},   author = {Rémi Trimbour},   year = {2025},   note = {R package version 0.0.2},   url = {https://cantinilab.github.io/HuMMuS/}, }"},{"path":[]},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"heterogeneous-multilayer-network-for-multi-omics-single-cell-data","dir":"","previous_headings":"","what":"Heterogeneous Multilayer network for Multi-omics Single-cell data","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"HuMMuS exploits multi-omics single-cell measurements infer numerous regulatory mechanisms. Inter-omics interactions (e.g. peak-gene, TF-peak) intra-omics interactions (e.g. peak-peak, gene-gene, TF-TF) considered capture regulatory interactions macromolecule cooperations.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"current outputs available HuMMuS gene regulatory networks (GRNs) enhancers TF - DNA binding regions TF - target genes.","code":""},{"path":[]},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"scrna--scatac","dir":"","previous_headings":"Overview","what":"scRNA + scATAC","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"Like current state---art methods infer GRN, provide standard version HuMMuS based scRNA-seq + scATAC-seq data (paired unpaired).","code":""},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"additional-modalities","dir":"","previous_headings":"Overview","what":"Additional modalities","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"HuMMuS developed extendable additional biological modality interest. possible add additional network already existing modality (e.g. prior-knowledge network data-driven network genes), new modality (e.g. adding epigenetic proteomic networks). now, personalisation requires directly using hummuspy (Python package) functions end pipeline writing configuration files manually. simplified soon !","code":""},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"tutorialsvignettes","dir":"","previous_headings":"","what":"Tutorials/Vignettes","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"Infer gene regulatory network outputs unpaired/paired scRNA + scATAC data shows application HuMMuS Chen dataset, used benchmark HuMMuS publication.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"HuMMuS (now!) available R requires hummuspy Python library. sure install virtual environment hummuspy make use reticulate R library connect two parts.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"hummus-python-dependency","dir":"","previous_headings":"Installation","what":"HuMMuS Python dependency","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"Python package hummuspy preferably installed using pip (terminal conda environment example) Alternatively, can also install directly R using reticulate package:","code":"conda create -n hummuspy_env python conda activate hummuspy_env pip install hummuspy library(reticulate) py_install(\"hummuspy\", envname = \"r-reticulate\", method=\"auto\")"},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"hummus-r-package","dir":"","previous_headings":"Installation","what":"HuMMuS R package","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"core R package can installed directly R: running HuMMuS, ’re using multiple conda environments, must ensure reticulate package points virtual environment hummuspy installed. can specify beginning R script, e.g.: details set reticulate connection, see: https://rstudio.github.io/reticulate","code":"devtools::install_github(\"cantinilab/HuMMuS\", ref=\"dev_SeuratV5\")  # If you only work SeuratV4, you can also use the main branch that will soon be deprecated #devtools::install_github(\"cantinilab/HuMMuS\") library(reticulate) # Using a specific conda environment envname = \"hummuspy_env\" # or \"r-reticulate\" for, e.g.: use_condaenv(envname, required = TRUE)"},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"scatac-processing","dir":"","previous_headings":"Installation","what":"scATAC processing","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"compute scATAC data HuMMuS, propose use Cicero. requires version running Monocle3. need install Monocle3, Cicero: encounter troubles Monocle3 installation, Ubuntu can try run: sudo apt-get install libgdal-dev libgeos-dev libproj-dev. can also go GitHub page help. Monocle version 1 2 still loaded R session may cause conflicts. encounter even restarting R session, try remove.packages(\"monocle\") reinstalling Monocle3 Cicero Alternatively, recently developed Circe, Python package replaces Cicero adds functionality. Circe much faster require generate first network python, loading R session. Since preprocessing different Cicero, results also differ.","code":"devtools::install_github(\"cole-trapnell-lab/monocle3\") devtools::install_github(\"cole-trapnell-lab/cicero-release\", ref = \"monocle3\")"},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"data-accessibility","dir":"","previous_headings":"","what":"Data accessibility","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"reproduce HuMMuS results presented manuscript, preprocessed data accessible  quick tests, Chen dataset preprocessed accessible directly package Seurat object: load(chen_dataset), along subset version load(chen_dataset_subset).","code":""},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"recommendations-for-users-issues-and-bugfixes","dir":"","previous_headings":"","what":"Recommendations for users, issues and bugfixes","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"recommend using common gene symbols defining gene names (e.g. human: MYC, NFKB2, mouse: Myc, Nfkb2). especially useful using Hummus functions query external tools, like compute_tf_network, can query Omnipath. Currently, HuMMus supports double - separator genomic coordinates, e.g. chr1-13354210-27462910. strongly recommend always using format genomic coordinates optimise creation Hummus object tool run. recommend installing hummuspy Python library clean conda virtual environment. running HuMMus HPC schedule manager(like SLURM), try assigning specific amount RAM core (example, 10GB per core) rather global pool memory, reducing total number cores Try reducing size networks, .e. retaining top % edges GRN peak-peak network. pip install git+https://github.com/cantinilab/HuMMuS.git@17136df93101d84910dfa9297232132990ff965b#subdirectory=hummuspy (NOTE necessary specify memory per core, just let HPC scheduler allocate )","code":""},{"path":"https://cantinilab.github.io/HuMMuS/index.html","id":"cite-us","dir":"","previous_headings":"","what":"Cite us","title":"Heterogeneous Multilayer Network for Multi-Omics Single-Cell Data","text":"Trimbour R., Deutschmann . M., Cantini L. Molecular mechanisms reconstruction single-cell multi-omics data HuMMuS. Bioinformatics (2024), btae143. doi: https://doi.org/10.1093/bioinformatics/btae143","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/DefaultAssay.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default assays of Hummus_Object (based on Seurat) — DefaultAssay","title":"Get Default assays of Hummus_Object (based on Seurat) — DefaultAssay","text":"Get set default assay","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/DefaultAssay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default assays of Hummus_Object (based on Seurat) — DefaultAssay","text":"","code":"# S3 method for class 'Hummus_Object' DefaultAssay(object, ...)  DefaultAssay(object, ...)  DefaultAssay(object, ...) <- value"},{"path":"https://cantinilab.github.io/HuMMuS/reference/DefaultAssay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Default assays of Hummus_Object (based on Seurat) — DefaultAssay","text":"object object value Name assay set default","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/DefaultAssay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default assays of Hummus_Object (based on Seurat) — DefaultAssay","text":"DefaultAssay: name default assay DefaultAssay<-: object default assay updated","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/DefaultAssay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default assays of Hummus_Object (based on Seurat) — DefaultAssay","text":"","code":"# Get current default assay DefaultAssay(object = pbmc_small) #> Error: object 'pbmc_small' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/Hummus_Object-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The Hummus_Object class — Hummus_Object-class","title":"The Hummus_Object class — Hummus_Object-class","text":"Hummus_Object object extended Seurat object storage analysis heterogeneous multilayer network","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/Hummus_Object-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The Hummus_Object class — Hummus_Object-class","text":"multilayer (multilayer) - Multilayer object motifs_db (motifs_db) - Motifs database assay (list) - List assays","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/Initiate_Hummus_Object.html","id":null,"dir":"Reference","previous_headings":"","what":"Initiate a hummus object — Initiate_Hummus_Object","title":"Initiate a hummus object — Initiate_Hummus_Object","text":"Initiate hummus object","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/Initiate_Hummus_Object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initiate a hummus object — Initiate_Hummus_Object","text":"","code":"Initiate_Hummus_Object(   seurat_assays,   active.assay = NULL,   multilayer = NULL,   motifs_db = NULL )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/Initiate_Hummus_Object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initiate a hummus object — Initiate_Hummus_Object","text":"seurat_assays Seurat object list Seurat assays active.assay name active assay. Default: NULL multilayer multilayer object. Default: NULL motifs_db motifs_db object. Default: NULL","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/Initiate_Hummus_Object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initiate a hummus object — Initiate_Hummus_Object","text":"hummus object","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/Initiate_Hummus_Object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initiate a hummus object — Initiate_Hummus_Object","text":"","code":"seurat_object <- Seurat::CreateSeuratObject(counts = matrix(rnorm(1000), nrow = 100, ncol = 10)) #> Error in loadNamespace(x): there is no package called ‘Seurat’          hummus <- InitiateHummus_Object(seurat_object) #> Error in InitiateHummus_Object(seurat_object): could not find function \"InitiateHummus_Object\"          hummus #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/VariableFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable features of assays in Hummus_Object (based on Seurat) — VariableFeatures","title":"Variable features of assays in Hummus_Object (based on Seurat) — VariableFeatures","text":"Variable features assays Hummus_Object (based Seurat)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/VariableFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable features of assays in Hummus_Object (based on Seurat) — VariableFeatures","text":"","code":"# S3 method for class 'Hummus_Object' VariableFeatures(   object,   method = NULL,   assay = NULL,   nfeatures = NULL,   layer = NA,   simplify = TRUE,   selection.method = lifecycle::deprecated(),   ... )  VariableFeatures(object, method = NULL, ...)  VariableFeatures(object, ...) <- value"},{"path":"https://cantinilab.github.io/HuMMuS/reference/VariableFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable features of assays in Hummus_Object (based on Seurat) — VariableFeatures","text":"value character vector variable features","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/VariableFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable features of assays in Hummus_Object (based on Seurat) — VariableFeatures","text":"VariableFeatures: vector variable features","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/add_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a network to a multiplex, a multilayer or an hummus object — add_network","title":"Add a network to a multiplex, a multilayer or an hummus object — add_network","text":"Add network multiplex, multilayer hummus object","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/add_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a network to a multiplex, a multilayer or an hummus object — add_network","text":"","code":"add_network(   object,   network,   network_name,   multiplex_name = NULL,   directed = FALSE,   weighted = FALSE,   verbose = 1 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/add_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a network to a multiplex, a multilayer or an hummus object — add_network","text":"object multiplex, multilayer hummus object network network (edge list) network_name name network multiplex_name name multiplex. Default: NULL object multiplex already directed Logical indicating network directed. Default: FALSE weighted Logical indicating network weighted. Default: FALSE verbose (integer) - Display function messages. Set 0 message displayed, >= 1 details.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/add_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a network to a multiplex, a multilayer or an hummus object — add_network","text":"multiplex, multilayer hummus object added network","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/add_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a network to a multiplex, a multilayer or an hummus object — add_network","text":"","code":"hummus <- add_network(                            object = hummus,                            network = atac_peak_network,                            network_name = network_name,                            multiplex_name = multiplex_name,                            weighted = TRUE,                            directed = FALSE) #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/aggregate_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate matrix over groups — aggregate_matrix","title":"Aggregate matrix over groups — aggregate_matrix","text":"Aggregate matrix groups","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/aggregate_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate matrix over groups — aggregate_matrix","text":"","code":"aggregate_matrix(x, groups = NULL, fun = \"mean\")"},{"path":"https://cantinilab.github.io/HuMMuS/reference/aggregate_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate matrix over groups — aggregate_matrix","text":"groups character vector groups aggregate . fun summary function applied group.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/aggregate_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate matrix over groups — aggregate_matrix","text":"summary matrix.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Bipartite class — bipartite-class","title":"Bipartite class — bipartite-class","text":"Bipartite object stores bipartite network (edge list) names left right features' multiplexes.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Bipartite class — bipartite-class","text":"network (data.frame) - Bipartite network (edge list) multiplex_left (character) - Left features' multiplex multiplex_right (character) - Right features' multiplex","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bipartite class — bipartite-class","text":"","code":"bipartite <- bipartite(                           network = bipartite_network,                          multiplex_left = \"RNA\",                         multiplex_right = \"peaks\") #> Error in bipartite(network = bipartite_network, multiplex_left = \"RNA\",     multiplex_right = \"peaks\"): could not find function \"bipartite\""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_peaks2genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute links between DNA regions and genenames — bipartite_peaks2genes","title":"Compute links between DNA regions and genenames — bipartite_peaks2genes","text":"Compute add bipartite DNA regions genenames hummus object. Links computed based distance peaks gene's TSS location gene.range annotations. Call find_peaks_near_genes function, can use different methods.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_peaks2genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute links between DNA regions and genenames — bipartite_peaks2genes","text":"","code":"bipartite_peaks2genes(   hummus_object,   gene_assay = \"RNA\",   peak_assay = \"peaks\",   gene_multiplex_name = NULL,   peak_multiplex_name = NULL,   peak_to_gene_method = \"Signac\",   upstream = 500,   downstream = 500,   only_tss = TRUE,   store_network = FALSE,   output_file = NULL,   bipartite_name = \"atac_rna\" )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_peaks2genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute links between DNA regions and genenames — bipartite_peaks2genes","text":"hummus_object (hummus_object) - Hummus object. gene_assay (character) - Name assay containing gene expression data. Default: \"RNA\". peak_assay (character) - Name assay containing DNA regions (ATAC peaks). Default: \"peaks\". gene_multiplex_name (character) - Name multiplex containing genes. NULL, name gene assay used. peak_multiplex_name (character) - Name multiplex containing DNA regions (ATAC peaks). NULL, name peak assay used. peak_to_gene_method (character) - Method use compute links peaks genes. Default: \"Signac\". 'Signac' - Use Signac::Extend extend genes. 'GREAT' - implemented yet. upstream (int) - Upstream distance TSS consider potential promoter. downstream (int) - Downstream distance TSS consider potential promoter. only_tss (logical) - TRUE, TSS considered. store_network (bool) - Save bipartite directly (TRUE, default) return without saving disk (FALSE). output_file (character) - Name output_file (store_bipartite == TRUE). Default: NULL. bipartite_name (character) - Name bipartite. Default: \"atac_rna\". verbose (integer) Display function messages. Set 0 message displayed, >= 1 details. Default: 1.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_peaks2genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute links between DNA regions and genenames — bipartite_peaks2genes","text":"hummus_object (hummus_object) - Hummus object w/ atac-rna bipartite added multilayer slot","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_peaks2genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute links between DNA regions and genenames — bipartite_peaks2genes","text":"","code":"hummus <- bipartite_peaks2genes(                        hummus_object = hummus,                        gene_assay = \"RNA\",                        peak_assay = \"peaks\",                        gene_multiplex_name = \"RNA\",                        peak_multiplex_name = \"peaks\",                        peak_to_gene_method = \"Signac\",                        upstream = 500,                        downstream = 500,                        only_tss = TRUE,                        store_network = FALSE,                        bipartite_name = \"atac_rna\") #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_tfs2peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute links between TFs and DNA regions (ATAC peaks) — bipartite_tfs2peaks","title":"Compute links between TFs and DNA regions (ATAC peaks) — bipartite_tfs2peaks","text":"Compute add bipartite TFs DNA regions hummus object. Links computed based binding motifs TFs locations reference genome. Currently based Signac AddMotifs function (–> motifmachR, based MOODs algorithm).","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_tfs2peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute links between TFs and DNA regions (ATAC peaks) — bipartite_tfs2peaks","text":"","code":"bipartite_tfs2peaks(   hummus_object,   tf_expr_assay = \"RNA\",   peak_assay = \"peaks\",   tf_multiplex_name = NULL,   peak_multiplex_name = NULL,   genome,   store_network = FALSE,   output_file = NULL,   verbose = 1,   bipartite_name = \"tf_peak\" )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_tfs2peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute links between TFs and DNA regions (ATAC peaks) — bipartite_tfs2peaks","text":"hummus_object (hummus_object) - Hummus object. tf_expr_assay (character) - Name assay containing TF expression data. NULL, TFs motif used. Default: \"RNA\". peak_assay (character) - Name assay containing DNA regions (ATAC peaks). Default: \"peaks\". tf_multiplex_name (character) - Name multiplex containing TFs. NULL, name TF assay used. peak_multiplex_name (character) - Name multiplex containing DNA regions (ATAC peaks). NULL, name peak assay used. genome (BSgenome object) - Reference genome. store_network (bool) - Save bipartite directly (TRUE, default) return without saving disk (FALSE). output_file (character) - Name output_file (store_bipartite == TRUE). Default: NULL. verbose (integer) Display function messages. Set 0 message displayed, >= 1 details. Default: 1. bipartite_name (character) - Name bipartite. Default: \"tf_peak\".","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_tfs2peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute links between TFs and DNA regions (ATAC peaks) — bipartite_tfs2peaks","text":"hummus_object (hummus_object) - Hummus object TF-peak bipartite added multilayer slot","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/bipartite_tfs2peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute links between TFs and DNA regions (ATAC peaks) — bipartite_tfs2peaks","text":"","code":"hummus <- bipartite_tfs2peaks(                      hummus_object = hummus,                      tf_expr_assay = \"RNA\",                      peak_assay = \"peaks\",                      tf_multiplex_name = \"TF\",                      peak_multiplex_name = \"peaks\",           genome = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38,                      store_network = FALSE,                      verbose = 1,                      bipartite_name = \"tf_peak\") #> Computing TF-peak bipartite #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_atac_peak_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute peak network from scATAC-seq data — compute_atac_peak_network","title":"Compute peak network from scATAC-seq data — compute_atac_peak_network","text":"function create network atac data (theory data wtih peaks coordinates features). Different method implemented point (e.g. RENIN), now Cicero still reference method available","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_atac_peak_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute peak network from scATAC-seq data — compute_atac_peak_network","text":"","code":"compute_atac_peak_network(   hummus,   atac_assay = \"peaks\",   genome = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38,   method = \"cicero\",   multiplex_name = NULL,   network_name = NULL,   store_network = FALSE,   output_file = NULL,   threshold = 0,   number_cells_per_clusters = 50,   sample_num = 100,   seed = 2025,   verbose = 1,   window = 5e+05,   reduction_method = \"UMAP\" )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_atac_peak_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute peak network from scATAC-seq data — compute_atac_peak_network","text":"hummus (Hummus_Object) - Hummus object atac_assay (character) - Name assay containing atac peaks data. genome (BSgenome) - Genome used compute distance peaks. method (character) - Method used infer network edges. 'cicero' - Use cicero infer regulatory networks. 'method' - . multiplex_name (character) - Name multiplex add network . Default 'peaks'. network_name (character) - Name network multiplex add network . Default 'peak_network'. store_network (bool) - Save network directly (TRUE, default) return without saving disk (FALSE). output_file (character) - Name output_file (store_network == TRUE). threshold (interger, default 0) - Minimal threshold select tf-gene edges. number_cells_per_clusters (integer) - Number cells grouped territory define pseudocells sample_num (integer | Cicero) - Number pseudocells sample territory. Default 100. seed (integer | Cicero) - Seed used sample pseudocells. Default 2025 verbose (integer) - Display function messages. Set 0 message displayed, >= 1 details. window (integer) - Size window consider potential cis-regulatory cooperations peaks. Default 500K base pairs. reduction_method (character | Cicero) - Method used reduce dimensionality data identify territories. Default 'UMAP'.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_atac_peak_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute peak network from scATAC-seq data — compute_atac_peak_network","text":"(data.frame) - Return list network interactions peaks","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_atac_peak_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute peak network from scATAC-seq data — compute_atac_peak_network","text":"Method descriptions : Cicero Use patial corelation peaks given window (e.g. : less distant 500K base pairs)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_atac_peak_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute peak network from scATAC-seq data — compute_atac_peak_network","text":"","code":"hummus <- compute_atac_peak_network(hummus) #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_gene_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute gene netwok from scRNA-seq data — compute_gene_network","title":"Compute gene netwok from scRNA-seq data — compute_gene_network","text":"function create network rna data (theory data wtih genes features). Different method implemented point (suggestion welcomed ! :) ), now Genie3 still reference method available","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_gene_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute gene netwok from scRNA-seq data — compute_gene_network","text":"","code":"compute_gene_network(   hummus,   gene_assay = \"RNA\",   tfs = NULL,   method = \"GENIE3\",   multiplex_name = NULL,   network_name = NULL,   store_network = FALSE,   output_file = NULL,   threshold = 0,   number_cores = 1,   verbose = 1 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_gene_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute gene netwok from scRNA-seq data — compute_gene_network","text":"hummus (Hummus_Object) - Hummus object gene_assay (character) - Name assay containing gene expression data. tfs vector(character) - List tfs considered. NULL, TFs motifs hummus object used. method (character) - Method used infer network edges. 'Genie3' - Use tree random forest infer regulatory networks. 'method' - . multiplex_name (character) - Name multiplex add network . Default 'RNA'. network_name (character) - Name network multiplex add network . Default 'RNA_network'. store_network (bool) - Save network directly (TRUE, default) return without saving disk (FALSE). output_file (character) - Name output_file (store_network == TRUE). threshold (interger, default 0) - Minimal threshold select tf-gene edges. number_cores (interger, default 1) - Number thread used parallelizable methods. verbose (integer) - Display function messages. Set 0 message displayed, >= 1 details.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_gene_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute gene netwok from scRNA-seq data — compute_gene_network","text":"(data.frame) - Return list network interactions genes","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_gene_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute gene netwok from scRNA-seq data — compute_gene_network","text":"Method descriptions : Genie3 Use tree random forest infer regulatory networks : https://bioconductor.org/packages/release/bioc/html/GENIE3.html","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_gene_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute gene netwok from scRNA-seq data — compute_gene_network","text":"","code":"hummus <- compute_gene_network(                                hummus,                                gene_assay = \"RNA\",                                method = \"GENIE3\",                                verbose = 1,                                number_cores = 8,                                store_network = FALSE) #> Computing gene network with  GENIE3  ... #> \tNo TFs list provided, fetching from hummus object... #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_tf_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute TF network and add it to hummus object — compute_tf_network","title":"Compute TF network and add it to hummus object — compute_tf_network","text":"Compute protein-protein interaction layer Omnipath request represent tf cooperativity. network top-layer HuMMuS multilayer.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_tf_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute TF network and add it to hummus object — compute_tf_network","text":"","code":"compute_tf_network(   hummus,   organism = 9606,   tfs = NA,   gene_assay = NULL,   method = NULL,   store_network = FALSE,   output_file = NULL,   source_target = \"AND\",   multiplex_name = \"TF\",   tf_network_name = \"TF_network\",   verbose = 1 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_tf_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute TF network and add it to hummus object — compute_tf_network","text":"hummus (Hummus_Object) - Hummus object organism (integer)  - Specie identifier Omnipath fetch specific interactions tfs vector(character) - List tfs consider. NA, tfs extracted hummus object get_tfs function. gene_assay (character) - Name assay get tfs tfs provided. NULL, TFs motifs hummus object used. method (character) - Method used infer network edges. 'Omnipath' - Use Omnipath infer tf-tf networks. 'NULL' - fake connected network computed. 'method' - . store_network (bool) - Save network directly (TRUE, default) return without saving disk (FALSE). output_file (character) - Name output_file (store_network == TRUE). source_target (''|'') - Fetch interactions involving two considered tfs ('', default), one considered tfs element ('') multiplex_name (character) - Name multiplex add network . Default 'TF'. tf_network_name (character) - Name network multiplex add network . Default 'TF_network'. verbose (integer) - Display function messages. Set 0 message displayed, >= 1 details.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_tf_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute TF network and add it to hummus object — compute_tf_network","text":"(Hummus_Object) - Return hummus object new network added.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/compute_tf_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute TF network and add it to hummus object — compute_tf_network","text":"","code":"hummus <- compute_tf_network(hummus,                                        gene_assay = \"RNA\",                                        verbose = 1) #> Creating a fake TF network with all TFs connected to a fake node. #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/dMcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy of the dMcast function from the Matrix.utils package, since this is off CRAN and does not seem to be maintained anymore internally — dMcast","title":"Copy of the dMcast function from the Matrix.utils package, since this is off CRAN and does not seem to be maintained anymore internally — dMcast","text":"Copy dMcast function Matrix.utils package, since CRAN seem maintained anymore internally","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/dMcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy of the dMcast function from the Matrix.utils package, since this is off CRAN and does not seem to be maintained anymore internally — dMcast","text":"","code":"dMcast(   data,   formula,   fun.aggregate = \"sum\",   value.var = NULL,   as.factors = FALSE,   factor.nas = TRUE,   drop.unused.levels = TRUE )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_binding_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Define binding_regions from hummus object — define_binding_regions","title":"Define binding_regions from hummus object — define_binding_regions","text":"Calling define_output function output_type = 'binding_regions'","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_binding_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define binding_regions from hummus object — define_binding_regions","text":"","code":"define_binding_regions(   hummus_object,   multiplex_names = NULL,   bipartites_names = NULL,   config_name = \"binding_regions_config.yml\",   config_folder = \"config\",   tf_multiplex = \"TF\",   atac_multiplex = \"peaks\",   rna_multiplex = \"RNA\",   multilayer_f = \"multilayer\",   gene_list = NULL,   tf_list = NULL,   save = FALSE,   output_f = NULL,   return_df = TRUE,   suffix_bipartites = \".tsv\",   njobs = 1 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_binding_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define binding_regions from hummus object — define_binding_regions","text":"hummus_object hummus object multiplex_names vector multiplex names considered. must subset names multiplexes hummus object. bipartites_names vector bipartites names considered. must subset names bipartites hummus object. config_name name config file created hummuspy config_folder folder config file created tf_multiplex name multiplex containing TFs atac_multiplex name multiplex containing ATAC-seq peaks rna_multiplex name multiplex containing RNA-seq genes multilayer_f folder multilayer stored gene_list vector genes considered final binding regions (filtering done genes inferring binding_regions) tf_list vector TFs considered binding_regions (filtering done TFs inferring binding_regions) save boolean indicating binding_regions saved output_f name file binding_regions can saved (save == TRUE) return_df boolean indicating binding_regions returned dataframe suffix_bipartites suffix add bipartites names (indicate exact file location) njobs number jobs used computation binding_regions","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_binding_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define binding_regions from hummus object — define_binding_regions","text":"dataframe containing binding_regions (return_df == TRUE)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_binding_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define binding_regions from hummus object — define_binding_regions","text":"","code":"binding_regions <- define_binding_regions(hummus_object = hummus,                             multilayer_f = multilayer_folder,                             njobs = 5) #> Error in value[[3L]](cond): hummuspy package not found. Make sure that Reticulate  #>       is pointing to the right Python binary."},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_enhancers.html","id":null,"dir":"Reference","previous_headings":"","what":"Define enhancers from hummus object — define_enhancers","title":"Define enhancers from hummus object — define_enhancers","text":"Calling define_output function output_type = 'enhancers'","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_enhancers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define enhancers from hummus object — define_enhancers","text":"","code":"define_enhancers(   hummus_object,   multiplex_names = NULL,   bipartites_names = NULL,   config_name = \"enhancers_config.yml\",   config_folder = \"config\",   tf_multiplex = \"TF\",   atac_multiplex = \"peaks\",   rna_multiplex = \"RNA\",   multilayer_f = \"multilayer\",   gene_list = NULL,   tf_list = NULL,   save = FALSE,   output_f = NULL,   return_df = TRUE,   suffix_bipartites = \".tsv\",   njobs = 1 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_enhancers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define enhancers from hummus object — define_enhancers","text":"hummus_object hummus object multiplex_names vector multiplex names considered. must subset names multiplexes hummus object. bipartites_names vector bipartites names considered. must subset names bipartites hummus object. config_name name config file created hummuspy config_folder folder config file created tf_multiplex name multiplex containing TFs atac_multiplex name multiplex containing ATAC-seq peaks rna_multiplex name multiplex containing RNA-seq genes multilayer_f folder multilayer stored gene_list vector genes considered final enhancers (filtering done genes inferring enhancers) tf_list vector TFs considered final enhancers (filtering done TFs inferring enhancers) save boolean indicating enhancers saved output_f name file enhancers saved (save == TRUE) return_df boolean indicating enhancers returned dataframe suffix_bipartites suffix add bipartites names (indicate exact file location) njobs number jobs used compute enhancers","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_enhancers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define enhancers from hummus object — define_enhancers","text":"dataframe containing enhancers (return_df == TRUE)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_enhancers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define enhancers from hummus object — define_enhancers","text":"","code":"enhancers <- define_enhancers(hummus_object = hummus,                             multilayer_f = multilayer_folder,                             njobs = 5) #> Error in value[[3L]](cond): hummuspy package not found. Make sure that Reticulate  #>       is pointing to the right Python binary."},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_general_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Define general config file for hummuspy — define_general_config","title":"Define general config file for hummuspy — define_general_config","text":"Define general config file hummuspy","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_general_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define general config file for hummuspy — define_general_config","text":"","code":"define_general_config(   hummus_object,   multiplex_names = NULL,   bipartites_names = NULL,   folder_multiplexes = \"multiplex\",   folder_bipartites = \"bipartites\",   seed_path = \"seed/seeds.txt\",   suffix = \".tsv\",   self_loops = FALSE,   restart_proba = 0.7,   save_configfile = FALSE,   config_name = \"config.yml\",   config_folder = \"config\",   multilayer_f = \"multilayer\",   suffix_bipartites = \".tsv\" )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_general_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define general config file for hummuspy — define_general_config","text":"hummus_object hummus object multiplex_names vector multiplex names considered. must subset names multiplexes hummus object, NULL multiplexes considered. bipartites_names vector bipartites names considered. must subset names bipartites hummus object, NULL bipartites considered. folder_multiplexes folder multiplexes stored folder_bipartites folder bipartites stored seed_path path seed file self_loops boolean indicating self loops considered. restart_proba restart probability random walk (default = 0.7) save_configfile boolean indicating config file saved config_name name config file created hummuspy config_folder folder config file created (inside multilayer_f) multilayer_f folder multilayer stored suffix_bipartites suffix add bipartites names (indicate exact file name)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_general_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define general config file for hummuspy — define_general_config","text":"config file hummuspy","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_grn.html","id":null,"dir":"Reference","previous_headings":"","what":"Define GRN from hummus object — define_grn","title":"Define GRN from hummus object — define_grn","text":"Calling define_output function output_type = 'GRN'","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_grn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define GRN from hummus object — define_grn","text":"","code":"define_grn(   hummus_object,   multiplex_names = NULL,   bipartites_names = NULL,   config_name = \"grn_config.yml\",   config_folder = \"config\",   tf_multiplex = \"TF\",   atac_multiplex = \"peaks\",   rna_multiplex = \"RNA\",   multilayer_f = \"multilayer\",   gene_list = NULL,   tf_list = NULL,   save = FALSE,   output_f = NULL,   return_df = TRUE,   suffix_bipartites = \".tsv\",   njobs = 1 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_grn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define GRN from hummus object — define_grn","text":"hummus_object hummus object multiplex_names vector multiplex names considered. must subset names multiplexes hummus object. bipartites_names vector bipartites names considered. must subset names bipartites hummus object. config_name name config file created hummuspy config_folder folder config file created tf_multiplex name multiplex containing TFs atac_multiplex name multiplex containing ATAC-seq peaks rna_multiplex name multiplex containing RNA-seq genes multilayer_f folder multilayer stored gene_list vector genes considered final GRN (filtering done genes inferring GRN) tf_list vector TFs considered final GRN (filtering done TFs inferring GRN) save boolean indicating GRN saved output_f name file GRN saved (save == TRUE) return_df boolean indicating GRN returned dataframe suffix_bipartites suffix add bipartites names (indicate exact file location) njobs number jobs used computation GRN","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_grn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define GRN from hummus object — define_grn","text":"dataframe containing GRN (return_df == TRUE)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_grn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define GRN from hummus object — define_grn","text":"","code":"grn <- define_grn(hummus_object = hummus,                             multilayer_f = multilayer_folder,                             njobs = 5) #> Error in value[[3L]](cond): hummuspy package not found. Make sure that Reticulate  #>       is pointing to the right Python binary."},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Define output from hummus object — define_output","title":"Define output from hummus object — define_output","text":"Define output hummus object","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define output from hummus object — define_output","text":"","code":"define_output(   output_type,   hummus_object,   multiplex_names = NULL,   bipartites_names = NULL,   config_name = \"config.yml\",   config_folder = \"config\",   tf_multiplex = \"TF\",   atac_multiplex = \"peaks\",   rna_multiplex = \"RNA\",   multilayer_f = \"multilayer\",   gene_list = NULL,   tf_list = NULL,   save = FALSE,   output_f = NULL,   return_df = TRUE,   suffix_bipartites = \".tsv\",   njobs = 1 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define output from hummus object — define_output","text":"output_type type output defined hummus_object hummus object multiplex_names vector multiplex names considered. must subset names multiplexes hummus object. bipartites_names vector bipartites names considered. must subset names bipartites hummus object. config_name name config file created hummuspy config_folder folder config file created tf_multiplex name multiplex containing TFs atac_multiplex name multiplex containing ATAC-seq peaks rna_multiplex name multiplex containing RNA-seq genes multilayer_f folder multilayer stored gene_list vector genes considered target_genes (filtering done genes inferring target_genes) tf_list vector TFs considered final target_genes (filtering done TFs inferring target_genes) save boolean indicating target_genes saved output_f name file target_genes saved (save == TRUE) return_df boolean indicating target_genes returned dataframe suffix_bipartites suffix add bipartites names (indicate exact file location) njobs number jobs used compute target_genes","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define output from hummus object — define_output","text":"dataframe containing target_genes (return_df == TRUE)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define output from hummus object — define_output","text":"","code":"target_genes <- define_output('grn', hummus_object = hummus) #> Error in value[[3L]](cond): hummuspy package not found. Make sure that Reticulate  #>       is pointing to the right Python binary."},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_target_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Define target genes from hummus object — define_target_genes","title":"Define target genes from hummus object — define_target_genes","text":"Calling define_output function output_type = 'target_genes'","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_target_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define target genes from hummus object — define_target_genes","text":"","code":"define_target_genes(   hummus_object,   multiplex_names = NULL,   bipartites_names = NULL,   config_name = \"target_genes_config.yml\",   config_folder = \"config\",   tf_multiplex = \"TF\",   atac_multiplex = \"peaks\",   rna_multiplex = \"RNA\",   multilayer_f = \"multilayer\",   gene_list = NULL,   tf_list = NULL,   save = FALSE,   output_f = NULL,   return_df = TRUE,   suffix_bipartites = \".tsv\",   njobs = 1 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_target_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define target genes from hummus object — define_target_genes","text":"hummus_object hummus object multiplex_names vector multiplex names considered. must subset names multiplexes hummus object. bipartites_names vector bipartites names considered. must subset names bipartites hummus object. config_name name config file created hummuspy config_folder folder config file created tf_multiplex name multiplex containing TFs atac_multiplex name multiplex containing ATAC-seq peaks rna_multiplex name multiplex containing RNA-seq genes multilayer_f folder multilayer stored gene_list vector genes considered target_genes (filtering done genes inferring target_genes) tf_list vector TFs considered final target_genes (filtering done TFs inferring target_genes) save boolean indicating target_genes saved output_f name file target_genes saved (save == TRUE) return_df boolean indicating target_genes returned dataframe suffix_bipartites suffix add bipartites names (indicate exact file location) njobs number jobs used compute target_genes","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_target_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define target genes from hummus object — define_target_genes","text":"dataframe containing target_genes (return_df == TRUE)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/define_target_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define target genes from hummus object — define_target_genes","text":"","code":"target_genes <- define_target_genes(hummus_object = hummus,                             multilayer_f = multilayer_folder,                             njobs = 5) #> Error in value[[3L]](cond): hummuspy package not found. Make sure that Reticulate  #>       is pointing to the right Python binary."},{"path":"https://cantinilab.github.io/HuMMuS/reference/fast_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy of the aggregate.Matrix function from the Matrix.utils package, since this is off CRAN and does not seem to be maintained anymore internally — fast_aggregate","title":"Copy of the aggregate.Matrix function from the Matrix.utils package, since this is off CRAN and does not seem to be maintained anymore internally — fast_aggregate","text":"Copy aggregate.Matrix function Matrix.utils package, since CRAN seem maintained anymore internally","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/fast_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy of the aggregate.Matrix function from the Matrix.utils package, since this is off CRAN and does not seem to be maintained anymore internally — fast_aggregate","text":"","code":"fast_aggregate(x, groupings = NULL, form = NULL, fun = \"sum\", ...)"},{"path":"https://cantinilab.github.io/HuMMuS/reference/find_peaks_near_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Associate peaks to genes based on distance to TSS (or gene body) — find_peaks_near_genes","title":"Associate peaks to genes based on distance to TSS (or gene body) — find_peaks_near_genes","text":"Associate peaks genes based distance TSS (gene body)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/find_peaks_near_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Associate peaks to genes based on distance to TSS (or gene body) — find_peaks_near_genes","text":"","code":"find_peaks_near_genes(   peaks,   genes,   sep = c(\"-\", \"-\"),   method = c(\"Signac\", \"GREAT\"),   upstream = 1e+05,   downstream = 0,   extend = 1e+06,   only_tss = FALSE,   verbose = TRUE )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/find_peaks_near_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Associate peaks to genes based on distance to TSS (or gene body) — find_peaks_near_genes","text":"peaks vector(character) - List peaks. genes vector(character) - List genes. sep vector(character) - Separator chromosome, start end position. Default: c('-', '-'). method (character) - Method use. Default: \"Signac\". 'Signac' - Use Signac::Extend extend genes. 'GREAT' - implemented yet. upstream (int) - Upstream distance TSS consider potential promoter. downstream (int) - Downstream distance TSS consider potential promoter. extend (int) - Integer defining distance upstream downstream basal regulatory region. Used method 'GREAT'. only_tss (logical) - TRUE, TSS considered. verbose (logical) - TRUE, print progress messages.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/find_peaks_near_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Associate peaks to genes based on distance to TSS (or gene body) — find_peaks_near_genes","text":"(matrix) - Matrix peaks x genes 1 peak near gene.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/find_peaks_near_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Associate peaks to genes based on distance to TSS (or gene body) — find_peaks_near_genes","text":"","code":"TODO #> Error: object 'TODO' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_bipartites_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Format bipartites names for python hummuspy package config functions — format_bipartites_names","title":"Format bipartites names for python hummuspy package config functions — format_bipartites_names","text":"Format bipartites names python hummuspy package config functions","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_bipartites_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format bipartites names for python hummuspy package config functions — format_bipartites_names","text":"","code":"format_bipartites_names(   hummus_object,   bipartites_names = NULL,   suffix_bipartites = \".tsv\" )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_bipartites_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format bipartites names for python hummuspy package config functions — format_bipartites_names","text":"hummus_object hummus object bipartites_names vector bipartites names considered. must subset names bipartites hummus object. suffix_bipartites suffix add bipartites location","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_bipartites_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format bipartites names for python hummuspy package config functions — format_bipartites_names","text":"list bipartites names formatted hummuspy config funtions element list list containing right left layer connected bipartite","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_bipartites_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format bipartites names for python hummuspy package config functions — format_bipartites_names","text":"","code":"bipartites_dictionary <- format_bipartites_names(                                       hummus_object = hummus,                                       bipartites_names = c(\"atac_rna\",                                                            \"tf_peaks\")) #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_multiplex_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Format multiplex names for python hummuspy package config functions — format_multiplex_names","title":"Format multiplex names for python hummuspy package config functions — format_multiplex_names","text":"Format multiplex names python hummuspy package config functions","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_multiplex_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format multiplex names for python hummuspy package config functions — format_multiplex_names","text":"","code":"format_multiplex_names(hummus_object, multiplex_names = NULL)"},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_multiplex_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format multiplex names for python hummuspy package config functions — format_multiplex_names","text":"hummus_object HuMMuS_Object multiplex_names vector multiplex names considered. must subset names multiplexes hummus object.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_multiplex_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format multiplex names for python hummuspy package config functions — format_multiplex_names","text":"list multiplexes names formatted hummuspy config funtions element list list network types (directed/weighted) name networks named hummus object","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/format_multiplex_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format multiplex names for python hummuspy package config functions — format_multiplex_names","text":"","code":"multiplexes_dictionary <- format_multiplex_names(                                        hummus_object = hummus,                                        multiplex_names = c(\"TF\", \"peaks\")) #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_genome_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch online genome annotations from Ensembldb database — get_genome_annotations","title":"Fetch online genome annotations from Ensembldb database — get_genome_annotations","text":"Fetch online genome annotations Ensembldb database","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_genome_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch online genome annotations from Ensembldb database — get_genome_annotations","text":"","code":"get_genome_annotations(   ensdb_annotations = EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_genome_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch online genome annotations from Ensembldb database — get_genome_annotations","text":"EnsDb_annotations (EndsDb object) - Ensembldb database (default: EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_genome_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch online genome annotations from Ensembldb database — get_genome_annotations","text":"gene_range (GRanges object) - Genome annotations","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_genome_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch online genome annotations from Ensembldb database — get_genome_annotations","text":"","code":"gene_range = get_genome_annotations(EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.)"},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_tf2motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch online TF motifs from JASPAR2020 and chromVARmotifs — get_tf2motifs","title":"Fetch online TF motifs from JASPAR2020 and chromVARmotifs — get_tf2motifs","text":"Fetch online TF motifs JASPAR2020 chromVARmotifs","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_tf2motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch online TF motifs from JASPAR2020 and chromVARmotifs — get_tf2motifs","text":"","code":"get_tf2motifs(species = \"human\")"},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_tf2motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch online TF motifs from JASPAR2020 and chromVARmotifs — get_tf2motifs","text":"species (character) - Species name (default: \"human\")","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_tf2motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch online TF motifs from JASPAR2020 and chromVARmotifs — get_tf2motifs","text":"motifs_db (motifs_db object) - TF2motifs + motifs PWMs","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_tf2motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch online TF motifs from JASPAR2020 and chromVARmotifs — get_tf2motifs","text":"","code":"motifs_db = get_tf2motifs(species = \"human\")"},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_tfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract TF names from scRNA data and tf2motifs — get_tfs","title":"Extract TF names from scRNA data and tf2motifs — get_tfs","text":"Extract TF names scRNA data tf2motifs","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_tfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract TF names from scRNA data and tf2motifs — get_tfs","text":"","code":"get_tfs(   hummus,   assay = NULL,   store_tfs = TRUE,   output_file = NULL,   verbose = 0 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_tfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract TF names from scRNA data and tf2motifs — get_tfs","text":"output_file (character) - Path output file. verbose (integer) - Verbosity level. Default: 1. species (character) - Species name. Default: \"human\". genes (vector(character)) - List expressed genes. tf2motifs (data.frame) - TF motifs names mapping. Columns: motif, tf.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/get_tfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract TF names from scRNA data and tf2motifs — get_tfs","text":"TFs (vector(character)) - List TFs expressed motifs.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/motifs_db-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Motifs database class — motifs_db-class","title":"Motifs database class — motifs_db-class","text":"MotifsDatabase object stores motifs(PFM matrices) tf2motifs (TF motifs names mapping) data.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/motifs_db-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Motifs database class — motifs_db-class","text":"motifs (TFBSTools::PWMatrixList) - PFM matrices. tf2motifs (data.frame) - TF motif names mapping. Columns: motif, tf.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/multilayer-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Multilayer class — multilayer-class","title":"Multilayer class — multilayer-class","text":"Multilayer object stores list bipartite networks list multiplex networks. can also stores config list create yaml file, used parametrize random walk restart explore multilayer.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/multilayer-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Multilayer class — multilayer-class","text":"bipartites (list) - List bipartite networks multiplex (list) - List multiplex networks config (list) - List parameters parametrize random walk restart explore multilayer","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/multiplex-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiplex class — multiplex-class","title":"Multiplex class — multiplex-class","text":"Multiplex object stores list networks, list features list logicals indicating network directed weighted.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/multiplex-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Multiplex class — multiplex-class","text":"networks (list) - List networks. features (vector) - Vector features. directed (list) - List logical indicating networks directed. weighted (list) - List logical indicating networks weighted.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/peaks_in_regulatory_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter peaks to those overlapping specific (regulatory) elements — peaks_in_regulatory_elements","title":"Filter peaks to those overlapping specific (regulatory) elements — peaks_in_regulatory_elements","text":"Function reduce list \"Peaks\" ones overlapping list \"RegEl\", e.g. regulatory elements, evolutionary conserved regions","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/peaks_in_regulatory_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter peaks to those overlapping specific (regulatory) elements — peaks_in_regulatory_elements","text":"","code":"peaks_in_regulatory_elements(   Peaks,   RegEl,   sep_Peak1 = \"-\",   sep_Peak2 = \"-\",   sep_RegEl1 = \"-\",   sep_RegEl2 = \"-\" )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/peaks_in_regulatory_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter peaks to those overlapping specific (regulatory) elements — peaks_in_regulatory_elements","text":"Peaks (character) vector genomic coordinates peaks RegEl (character) vector genomic coordinates regulatory elements sep_Peak1 (character) separator chromosome start position peak sep_Peak2 (character) separator start position end position peak sep_RegEl1 (character) separator chromosome start position regulatory element sep_RegEl2 (character) separator start position end position regulatory element","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/peaks_in_regulatory_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter peaks to those overlapping specific (regulatory) elements — peaks_in_regulatory_elements","text":"(character) vector genomic coordinates peaks overlapping","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/peaks_in_regulatory_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter peaks to those overlapping specific (regulatory) elements — peaks_in_regulatory_elements","text":"","code":"peaks_in_regulatory_elements(peaks, RegEl) #> Error: object 'peaks' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/run_cicero_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Cicero wrapper function for the compute_atac_peak_network function — run_cicero_wrapper","title":"Cicero wrapper function for the compute_atac_peak_network function — run_cicero_wrapper","text":"function wrapper compute_atac_peak_network function layers.R. computes peak network scATAC-seq data using Cicero. returns data frame peak network. data frame also contains coaccess score edge. coaccess score probability two peaks accessible cell. coaccess score computed Cicero. Edges filtered based coaccess score. edges coaccess score > threshold kept.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/run_cicero_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cicero wrapper function for the compute_atac_peak_network function — run_cicero_wrapper","text":"","code":"run_cicero_wrapper(   hummus,   atac_assay,   genome,   window,   number_cells_per_clusters,   sample_num,   seed,   verbose,   threshold,   reduction_method = \"UMAP\" )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/run_cicero_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cicero wrapper function for the compute_atac_peak_network function — run_cicero_wrapper","text":"hummus hummus object atac_assay name assay containing scATAC-seq data genome genome object window window size used Cicero compute coaccess score number_cells_per_clusters number cells per cluster used Cicero compute coaccess score sample_num number samples used Cicero compute coaccess score seed seed used Cicero compute coaccess score verbose verbosity level threshold threshold used filter edges based coaccess score reduction_method method used monocle3 reduce dimension scATAC-seq data defining pseudocells. default UMAP.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/run_cicero_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cicero wrapper function for the compute_atac_peak_network function — run_cicero_wrapper","text":"data frame containing peak network","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/run_tf_null_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"tf_null wrapper function for the tf_network function — run_tf_null_wrapper","title":"tf_null wrapper function for the tf_network function — run_tf_null_wrapper","text":"function wrapper tf_network function","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/run_tf_null_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tf_null wrapper function for the tf_network function — run_tf_null_wrapper","text":"","code":"run_tf_null_wrapper(   hummus = hummus,   organism = organism,   tfs = tfs,   gene_assay = gene_assay,   verbose = 1 )"},{"path":"https://cantinilab.github.io/HuMMuS/reference/run_tf_null_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tf_null wrapper function for the tf_network function — run_tf_null_wrapper","text":"hummus hummus object","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/save_multilayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Save multilayer object files in a hierarchical structure on disk — save_multilayer","title":"Save multilayer object files in a hierarchical structure on disk — save_multilayer","text":"Save multilayer files Hummus_Object hierarchical structure disk, inside folder specified folder_name","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/save_multilayer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save multilayer object files in a hierarchical structure on disk — save_multilayer","text":"","code":"save_multilayer(hummus, folder_name, verbose = TRUE, suffix = \".tsv\")"},{"path":"https://cantinilab.github.io/HuMMuS/reference/save_multilayer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save multilayer object files in a hierarchical structure on disk — save_multilayer","text":"hummus hummus object folder_name name folder save multilayer verbose (integer) - Display function messages. Set 0 message displayed, >= 1 details. suffix suffix files save. Default: \".tsv\"","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/save_multilayer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save multilayer object files in a hierarchical structure on disk — save_multilayer","text":"Nothing, create folder containing multilayer object files","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/save_multilayer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save multilayer object files in a hierarchical structure on disk — save_multilayer","text":"","code":"folder_name = \"multilayer\" save_multilayer(hummus = hummus, folder_name = \"multilayer\") #> Error: object 'hummus' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/store_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function to save a network or not — store_network","title":"Wrapper function to save a network or not — store_network","text":"Wrapper function save network file according store_network parameter. store_network TRUE, network saved output_file.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/store_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function to save a network or not — store_network","text":"","code":"store_network(network, store_network, output_file, verbose = 1)"},{"path":"https://cantinilab.github.io/HuMMuS/reference/store_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function to save a network or not — store_network","text":"network network (edge list) store_network Logical indicating network saved output_file name file save network verbose (integer) - Display function messages. Set 0 message displayed, >= 1 details.","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/store_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function to save a network or not — store_network","text":"Nothing, save network file store_network TRUE","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/store_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function to save a network or not — store_network","text":"","code":"network <- read.table(\"network.tsv\", header = TRUE, sep = \"\\t\") #> Warning: cannot open file 'network.tsv': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection           store_network(network = network,               store_network = TRUE,               output_file = \"network.tsv\",               verbose = 1) #> \tStoring network in file :  network.tsv  #> Error: object 'network' not found"},{"path":"https://cantinilab.github.io/HuMMuS/reference/sub-subset-Hummus_Object.html","id":null,"dir":"Reference","previous_headings":"","what":"Access assays in Hummus_Object (based on Seurat) — [[<-,Hummus_Object","title":"Access assays in Hummus_Object (based on Seurat) — [[<-,Hummus_Object","text":"Access assays Hummus_Object (based Seurat)","code":""},{"path":"https://cantinilab.github.io/HuMMuS/reference/sub-subset-Hummus_Object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access assays in Hummus_Object (based on Seurat) — [[<-,Hummus_Object","text":"","code":"# S3 method for class 'Hummus_Object' x[[i = missing_arg(), ..., drop = FALSE, na.rm = FALSE]]"}]
